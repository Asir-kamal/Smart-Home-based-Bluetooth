
Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000003a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000414  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000414  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000414  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000444  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00000480  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d71  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000769  00000000  00000000  00001301  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000075c  00000000  00000000  00001a6a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001f8  00000000  00000000  000021c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047e  00000000  00000000  000023c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a0  00000000  00000000  0000283e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d0  00000000  00000000  00002cde  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 5f 01 	jmp	0x2be	; 0x2be <__vector_12>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 56 01 	call	0x2ac	; 0x2ac <main>
  74:	0c 94 ce 01 	jmp	0x39c	; 0x39c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <DIO_SetPin_Direction>:
*******************************************************************************/


void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction){
	
	switch(direction){
  7c:	44 23       	and	r20, r20
  7e:	19 f0       	breq	.+6      	; 0x86 <DIO_SetPin_Direction+0xa>
  80:	41 30       	cpi	r20, 0x01	; 1
  82:	c9 f1       	breq	.+114    	; 0xf6 <DIO_SetPin_Direction+0x7a>
  84:	08 95       	ret
		case DIO_PORT_INPUT:	 /*  Case input Port							  */
		switch(port){
  86:	81 30       	cpi	r24, 0x01	; 1
  88:	91 f0       	breq	.+36     	; 0xae <DIO_SetPin_Direction+0x32>
  8a:	28 f0       	brcs	.+10     	; 0x96 <DIO_SetPin_Direction+0x1a>
  8c:	82 30       	cpi	r24, 0x02	; 2
  8e:	d9 f0       	breq	.+54     	; 0xc6 <DIO_SetPin_Direction+0x4a>
  90:	83 30       	cpi	r24, 0x03	; 3
  92:	29 f1       	breq	.+74     	; 0xde <DIO_SetPin_Direction+0x62>
  94:	08 95       	ret
			case DIO_PORTA:		 /* Case for PORTA								  */
			CLR_BIT(DDRA,pin);   /* 0 in DDRA in Specific Pin to set as Input Pin */
  96:	2a b3       	in	r18, 0x1a	; 26
  98:	81 e0       	ldi	r24, 0x01	; 1
  9a:	90 e0       	ldi	r25, 0x00	; 0
  9c:	02 c0       	rjmp	.+4      	; 0xa2 <DIO_SetPin_Direction+0x26>
  9e:	88 0f       	add	r24, r24
  a0:	99 1f       	adc	r25, r25
  a2:	6a 95       	dec	r22
  a4:	e2 f7       	brpl	.-8      	; 0x9e <DIO_SetPin_Direction+0x22>
  a6:	80 95       	com	r24
  a8:	82 23       	and	r24, r18
  aa:	8a bb       	out	0x1a, r24	; 26
			break;
  ac:	08 95       	ret
			case DIO_PORTB:		 /* Case for PORTB								  */
			CLR_BIT(DDRB,pin);	 /* 0 in DDRB in Specific Pin to set as Input Pin */
  ae:	27 b3       	in	r18, 0x17	; 23
  b0:	81 e0       	ldi	r24, 0x01	; 1
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	02 c0       	rjmp	.+4      	; 0xba <DIO_SetPin_Direction+0x3e>
  b6:	88 0f       	add	r24, r24
  b8:	99 1f       	adc	r25, r25
  ba:	6a 95       	dec	r22
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <DIO_SetPin_Direction+0x3a>
  be:	80 95       	com	r24
  c0:	82 23       	and	r24, r18
  c2:	87 bb       	out	0x17, r24	; 23
			break;
  c4:	08 95       	ret
			case DIO_PORTC:      /* Case for PORTC								  */
			CLR_BIT(DDRC,pin);	 /* 0 in DDRC in Specific Pin to set as Input Pin */
  c6:	24 b3       	in	r18, 0x14	; 20
  c8:	81 e0       	ldi	r24, 0x01	; 1
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <DIO_SetPin_Direction+0x56>
  ce:	88 0f       	add	r24, r24
  d0:	99 1f       	adc	r25, r25
  d2:	6a 95       	dec	r22
  d4:	e2 f7       	brpl	.-8      	; 0xce <DIO_SetPin_Direction+0x52>
  d6:	80 95       	com	r24
  d8:	82 23       	and	r24, r18
  da:	84 bb       	out	0x14, r24	; 20
			break;
  dc:	08 95       	ret
			case DIO_PORTD:	     /* Case for PORTD								  */
			CLR_BIT(DDRD,pin);	 /* 0 in DDRD in Specific Pin to set as Input Pin */
  de:	21 b3       	in	r18, 0x11	; 17
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_SetPin_Direction+0x6e>
  e6:	88 0f       	add	r24, r24
  e8:	99 1f       	adc	r25, r25
  ea:	6a 95       	dec	r22
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_SetPin_Direction+0x6a>
  ee:	80 95       	com	r24
  f0:	82 23       	and	r24, r18
  f2:	81 bb       	out	0x11, r24	; 17
			break;
  f4:	08 95       	ret
		}
		break;
		case DIO_PORT_OUTPUT:	/* Case Output Port */
		switch(port){
  f6:	81 30       	cpi	r24, 0x01	; 1
  f8:	89 f0       	breq	.+34     	; 0x11c <DIO_SetPin_Direction+0xa0>
  fa:	28 f0       	brcs	.+10     	; 0x106 <DIO_SetPin_Direction+0x8a>
  fc:	82 30       	cpi	r24, 0x02	; 2
  fe:	c9 f0       	breq	.+50     	; 0x132 <DIO_SetPin_Direction+0xb6>
 100:	83 30       	cpi	r24, 0x03	; 3
 102:	11 f1       	breq	.+68     	; 0x148 <DIO_SetPin_Direction+0xcc>
 104:	08 95       	ret
			case DIO_PORTA:		/* Case for PORTA											 */
			SET_BIT(DDRA,pin);	/* 0 in DDRA Register in Specific Pin to set as Output Pin	 */
 106:	2a b3       	in	r18, 0x1a	; 26
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	02 c0       	rjmp	.+4      	; 0x112 <DIO_SetPin_Direction+0x96>
 10e:	88 0f       	add	r24, r24
 110:	99 1f       	adc	r25, r25
 112:	6a 95       	dec	r22
 114:	e2 f7       	brpl	.-8      	; 0x10e <DIO_SetPin_Direction+0x92>
 116:	82 2b       	or	r24, r18
 118:	8a bb       	out	0x1a, r24	; 26
			break;
 11a:	08 95       	ret
			case DIO_PORTB:		/* Case for PORTB											 */
			SET_BIT(DDRB,pin);	/* 0 in DDRB Register in Specific Pin to set as Output Pin	 */
 11c:	27 b3       	in	r18, 0x17	; 23
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	02 c0       	rjmp	.+4      	; 0x128 <DIO_SetPin_Direction+0xac>
 124:	88 0f       	add	r24, r24
 126:	99 1f       	adc	r25, r25
 128:	6a 95       	dec	r22
 12a:	e2 f7       	brpl	.-8      	; 0x124 <DIO_SetPin_Direction+0xa8>
 12c:	82 2b       	or	r24, r18
 12e:	87 bb       	out	0x17, r24	; 23
			break;
 130:	08 95       	ret
			case DIO_PORTC:		/* Case for PORTC											 */
			SET_BIT(DDRC,pin);	/* 0 in DDRC Register in Specific Pin to set as Output Pin	 */
 132:	24 b3       	in	r18, 0x14	; 20
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	02 c0       	rjmp	.+4      	; 0x13e <DIO_SetPin_Direction+0xc2>
 13a:	88 0f       	add	r24, r24
 13c:	99 1f       	adc	r25, r25
 13e:	6a 95       	dec	r22
 140:	e2 f7       	brpl	.-8      	; 0x13a <DIO_SetPin_Direction+0xbe>
 142:	82 2b       	or	r24, r18
 144:	84 bb       	out	0x14, r24	; 20
			break;
 146:	08 95       	ret
			case DIO_PORTD:		/* Case for PORTD											 */
			SET_BIT(DDRD,pin);	/* 0 in DDRD Register in Specific Pin to set as Output Pin	 */
 148:	21 b3       	in	r18, 0x11	; 17
 14a:	81 e0       	ldi	r24, 0x01	; 1
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	02 c0       	rjmp	.+4      	; 0x154 <DIO_SetPin_Direction+0xd8>
 150:	88 0f       	add	r24, r24
 152:	99 1f       	adc	r25, r25
 154:	6a 95       	dec	r22
 156:	e2 f7       	brpl	.-8      	; 0x150 <DIO_SetPin_Direction+0xd4>
 158:	82 2b       	or	r24, r18
 15a:	81 bb       	out	0x11, r24	; 17
 15c:	08 95       	ret

0000015e <DIO_SetPin_Value>:
	
}

void DIO_SetPin_Value(Uint8t port, Uint8t pin, Uint8t value){
	
	switch(value){
 15e:	44 23       	and	r20, r20
 160:	19 f0       	breq	.+6      	; 0x168 <DIO_SetPin_Value+0xa>
 162:	41 30       	cpi	r20, 0x01	; 1
 164:	c9 f1       	breq	.+114    	; 0x1d8 <DIO_SetPin_Value+0x7a>
 166:	08 95       	ret
		case DIO_PORT_LOW:			/* Case for Low States */
		switch(port){
 168:	81 30       	cpi	r24, 0x01	; 1
 16a:	91 f0       	breq	.+36     	; 0x190 <DIO_SetPin_Value+0x32>
 16c:	28 f0       	brcs	.+10     	; 0x178 <DIO_SetPin_Value+0x1a>
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	d9 f0       	breq	.+54     	; 0x1a8 <DIO_SetPin_Value+0x4a>
 172:	83 30       	cpi	r24, 0x03	; 3
 174:	29 f1       	breq	.+74     	; 0x1c0 <DIO_SetPin_Value+0x62>
 176:	08 95       	ret
			case DIO_PORTA:			/* Case for PORTA									   		*/
			CLR_BIT(PORTA,pin);		/* Activate Low logic(0) in PORTA Register in Specific Pin  */
 178:	2b b3       	in	r18, 0x1b	; 27
 17a:	81 e0       	ldi	r24, 0x01	; 1
 17c:	90 e0       	ldi	r25, 0x00	; 0
 17e:	02 c0       	rjmp	.+4      	; 0x184 <DIO_SetPin_Value+0x26>
 180:	88 0f       	add	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	6a 95       	dec	r22
 186:	e2 f7       	brpl	.-8      	; 0x180 <DIO_SetPin_Value+0x22>
 188:	80 95       	com	r24
 18a:	82 23       	and	r24, r18
 18c:	8b bb       	out	0x1b, r24	; 27
			break;
 18e:	08 95       	ret
			case DIO_PORTB:			/* Case for PORTB											*/
			CLR_BIT(PORTB,pin);		/* Activate Low logic(0) in PORTB Register in Specific Pin  */
 190:	28 b3       	in	r18, 0x18	; 24
 192:	81 e0       	ldi	r24, 0x01	; 1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	02 c0       	rjmp	.+4      	; 0x19c <DIO_SetPin_Value+0x3e>
 198:	88 0f       	add	r24, r24
 19a:	99 1f       	adc	r25, r25
 19c:	6a 95       	dec	r22
 19e:	e2 f7       	brpl	.-8      	; 0x198 <DIO_SetPin_Value+0x3a>
 1a0:	80 95       	com	r24
 1a2:	82 23       	and	r24, r18
 1a4:	88 bb       	out	0x18, r24	; 24
			break;
 1a6:	08 95       	ret
			case DIO_PORTC:			/* Case for PORTC											*/
			CLR_BIT(PORTC,pin);		/* Activate Low logic(0) in PORTC Register in Specific Pin  */
 1a8:	25 b3       	in	r18, 0x15	; 21
 1aa:	81 e0       	ldi	r24, 0x01	; 1
 1ac:	90 e0       	ldi	r25, 0x00	; 0
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <DIO_SetPin_Value+0x56>
 1b0:	88 0f       	add	r24, r24
 1b2:	99 1f       	adc	r25, r25
 1b4:	6a 95       	dec	r22
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <DIO_SetPin_Value+0x52>
 1b8:	80 95       	com	r24
 1ba:	82 23       	and	r24, r18
 1bc:	85 bb       	out	0x15, r24	; 21
			break;
 1be:	08 95       	ret
			case DIO_PORTD:			/* Case for PORTD											*/
			CLR_BIT(PORTD,pin);		/* Activate Low logic(0) in PORTD Register in Specific Pin  */
 1c0:	22 b3       	in	r18, 0x12	; 18
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	02 c0       	rjmp	.+4      	; 0x1cc <DIO_SetPin_Value+0x6e>
 1c8:	88 0f       	add	r24, r24
 1ca:	99 1f       	adc	r25, r25
 1cc:	6a 95       	dec	r22
 1ce:	e2 f7       	brpl	.-8      	; 0x1c8 <DIO_SetPin_Value+0x6a>
 1d0:	80 95       	com	r24
 1d2:	82 23       	and	r24, r18
 1d4:	82 bb       	out	0x12, r24	; 18
			break;
 1d6:	08 95       	ret
		}
		break;
		case DIO_PORT_HIGH:			/* Case for High States */
		switch(port){
 1d8:	81 30       	cpi	r24, 0x01	; 1
 1da:	89 f0       	breq	.+34     	; 0x1fe <DIO_SetPin_Value+0xa0>
 1dc:	28 f0       	brcs	.+10     	; 0x1e8 <DIO_SetPin_Value+0x8a>
 1de:	82 30       	cpi	r24, 0x02	; 2
 1e0:	c9 f0       	breq	.+50     	; 0x214 <DIO_SetPin_Value+0xb6>
 1e2:	83 30       	cpi	r24, 0x03	; 3
 1e4:	11 f1       	breq	.+68     	; 0x22a <DIO_SetPin_Value+0xcc>
 1e6:	08 95       	ret
			case DIO_PORTA:			/* Case for PORTA											*/
			SET_BIT(PORTA,pin);		/* Activate High logic(1) in PORTA Register in Specific Pin */
 1e8:	2b b3       	in	r18, 0x1b	; 27
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPin_Value+0x96>
 1f0:	88 0f       	add	r24, r24
 1f2:	99 1f       	adc	r25, r25
 1f4:	6a 95       	dec	r22
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPin_Value+0x92>
 1f8:	82 2b       	or	r24, r18
 1fa:	8b bb       	out	0x1b, r24	; 27
			break;
 1fc:	08 95       	ret
			case DIO_PORTB:			/* Case for PORTB											*/
			SET_BIT(PORTB,pin);		/* Activate High logic(1) in PORTB Register in Specific Pin */
 1fe:	28 b3       	in	r18, 0x18	; 24
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	90 e0       	ldi	r25, 0x00	; 0
 204:	02 c0       	rjmp	.+4      	; 0x20a <DIO_SetPin_Value+0xac>
 206:	88 0f       	add	r24, r24
 208:	99 1f       	adc	r25, r25
 20a:	6a 95       	dec	r22
 20c:	e2 f7       	brpl	.-8      	; 0x206 <DIO_SetPin_Value+0xa8>
 20e:	82 2b       	or	r24, r18
 210:	88 bb       	out	0x18, r24	; 24
			break;
 212:	08 95       	ret
			case DIO_PORTC:			/* Case for PORTC											*/
			SET_BIT(PORTC,pin);		/* Activate High logic(1) in PORTC Register in Specific Pin */
 214:	25 b3       	in	r18, 0x15	; 21
 216:	81 e0       	ldi	r24, 0x01	; 1
 218:	90 e0       	ldi	r25, 0x00	; 0
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_SetPin_Value+0xc2>
 21c:	88 0f       	add	r24, r24
 21e:	99 1f       	adc	r25, r25
 220:	6a 95       	dec	r22
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_SetPin_Value+0xbe>
 224:	82 2b       	or	r24, r18
 226:	85 bb       	out	0x15, r24	; 21
			break;
 228:	08 95       	ret
			case DIO_PORTD:			/* Case for PORTD				   							*/
			SET_BIT(PORTD,pin);		/* Activate High logic(1) in PORTD Register in Specific Pin */
 22a:	22 b3       	in	r18, 0x12	; 18
 22c:	81 e0       	ldi	r24, 0x01	; 1
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	02 c0       	rjmp	.+4      	; 0x236 <DIO_SetPin_Value+0xd8>
 232:	88 0f       	add	r24, r24
 234:	99 1f       	adc	r25, r25
 236:	6a 95       	dec	r22
 238:	e2 f7       	brpl	.-8      	; 0x232 <DIO_SetPin_Value+0xd4>
 23a:	82 2b       	or	r24, r18
 23c:	82 bb       	out	0x12, r24	; 18
 23e:	08 95       	ret

00000240 <LED0_Init>:
	
	DIO_SetPin_Value(DIO_PORTC, LED1_PIN, LED_LOW);			/* Clear Value in PORTC PIN7 as Low */
}
void LED1_TGL (void){
	
	DIO_TglPin_Vlaue(DIO_PORTC, DIO_PIN7);
 240:	41 e0       	ldi	r20, 0x01	; 1
 242:	62 e0       	ldi	r22, 0x02	; 2
 244:	82 e0       	ldi	r24, 0x02	; 2
 246:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPin_Direction>
 24a:	08 95       	ret

0000024c <LED0_ON>:
 24c:	41 e0       	ldi	r20, 0x01	; 1
 24e:	62 e0       	ldi	r22, 0x02	; 2
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_SetPin_Value>
 256:	08 95       	ret

00000258 <LED0_OFF>:
 258:	40 e0       	ldi	r20, 0x00	; 0
 25a:	62 e0       	ldi	r22, 0x02	; 2
 25c:	82 e0       	ldi	r24, 0x02	; 2
 25e:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_SetPin_Value>
 262:	08 95       	ret

00000264 <LED1_Init>:
 264:	41 e0       	ldi	r20, 0x01	; 1
 266:	67 e0       	ldi	r22, 0x07	; 7
 268:	82 e0       	ldi	r24, 0x02	; 2
 26a:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPin_Direction>
 26e:	08 95       	ret

00000270 <LED1_ON>:
 270:	41 e0       	ldi	r20, 0x01	; 1
 272:	67 e0       	ldi	r22, 0x07	; 7
 274:	82 e0       	ldi	r24, 0x02	; 2
 276:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_SetPin_Value>
 27a:	08 95       	ret

0000027c <LED1_OFF>:
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	67 e0       	ldi	r22, 0x07	; 7
 280:	82 e0       	ldi	r24, 0x02	; 2
 282:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_SetPin_Value>
 286:	08 95       	ret

00000288 <LED2_Init>:



void LED2_Init(void){

	DIO_SetPin_Direction(DIO_PORTD, LED2_PIN, LED_OUTPUT);	/* Set LED direction as Output		*/
 288:	41 e0       	ldi	r20, 0x01	; 1
 28a:	63 e0       	ldi	r22, 0x03	; 3
 28c:	83 e0       	ldi	r24, 0x03	; 3
 28e:	0e 94 3e 00 	call	0x7c	; 0x7c <DIO_SetPin_Direction>
 292:	08 95       	ret

00000294 <LED2_ON>:
}
void LED2_ON  (void){

	DIO_SetPin_Value(DIO_PORTD, LED2_PIN, LED_HIGH);
 294:	41 e0       	ldi	r20, 0x01	; 1
 296:	63 e0       	ldi	r22, 0x03	; 3
 298:	83 e0       	ldi	r24, 0x03	; 3
 29a:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_SetPin_Value>
 29e:	08 95       	ret

000002a0 <LED2_OFF>:
}															/* Set Value in PORTD PIN3 as High  */
void LED2_OFF (void){

	DIO_SetPin_Value(DIO_PORTD, LED2_PIN, LED_LOW);
 2a0:	40 e0       	ldi	r20, 0x00	; 0
 2a2:	63 e0       	ldi	r22, 0x03	; 3
 2a4:	83 e0       	ldi	r24, 0x03	; 3
 2a6:	0e 94 af 00 	call	0x15e	; 0x15e <DIO_SetPin_Value>
 2aa:	08 95       	ret

000002ac <main>:

volatile Uint8t data ;

int main(void)
{
	SPI_Init();
 2ac:	0e 94 b6 01 	call	0x36c	; 0x36c <SPI_Init>
	LED0_Init();
 2b0:	0e 94 20 01 	call	0x240	; 0x240 <LED0_Init>
	LED1_Init();
 2b4:	0e 94 32 01 	call	0x264	; 0x264 <LED1_Init>
	LED2_Init();
 2b8:	0e 94 44 01 	call	0x288	; 0x288 <LED2_Init>
 2bc:	ff cf       	rjmp	.-2      	; 0x2bc <main+0x10>

000002be <__vector_12>:
	{
	}
}


ISR(SPI_STC_vect){
 2be:	1f 92       	push	r1
 2c0:	0f 92       	push	r0
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	0f 92       	push	r0
 2c6:	11 24       	eor	r1, r1
 2c8:	2f 93       	push	r18
 2ca:	3f 93       	push	r19
 2cc:	4f 93       	push	r20
 2ce:	5f 93       	push	r21
 2d0:	6f 93       	push	r22
 2d2:	7f 93       	push	r23
 2d4:	8f 93       	push	r24
 2d6:	9f 93       	push	r25
 2d8:	af 93       	push	r26
 2da:	bf 93       	push	r27
 2dc:	ef 93       	push	r30
 2de:	ff 93       	push	r31
	
	data = SPI_Received();
 2e0:	0e 94 cc 01 	call	0x398	; 0x398 <SPI_Received>
 2e4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	switch(data){
 2e8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 2ec:	82 36       	cpi	r24, 0x62	; 98
 2ee:	91 f0       	breq	.+36     	; 0x314 <__vector_12+0x56>
 2f0:	83 36       	cpi	r24, 0x63	; 99
 2f2:	f1 f0       	breq	.+60     	; 0x330 <__vector_12+0x72>
 2f4:	81 36       	cpi	r24, 0x61	; 97
 2f6:	49 f5       	brne	.+82     	; 0x34a <__vector_12+0x8c>
		case 'a':
		LED0_ON();_delay_ms(1000);LED0_OFF();
 2f8:	0e 94 26 01 	call	0x24c	; 0x24c <LED0_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2fc:	2f ef       	ldi	r18, 0xFF	; 255
 2fe:	83 ed       	ldi	r24, 0xD3	; 211
 300:	90 e3       	ldi	r25, 0x30	; 48
 302:	21 50       	subi	r18, 0x01	; 1
 304:	80 40       	sbci	r24, 0x00	; 0
 306:	90 40       	sbci	r25, 0x00	; 0
 308:	e1 f7       	brne	.-8      	; 0x302 <__vector_12+0x44>
 30a:	00 c0       	rjmp	.+0      	; 0x30c <__vector_12+0x4e>
 30c:	00 00       	nop
 30e:	0e 94 2c 01 	call	0x258	; 0x258 <LED0_OFF>
		break;
 312:	1b c0       	rjmp	.+54     	; 0x34a <__vector_12+0x8c>
		case 'b':
		LED1_ON();_delay_ms(1000);LED1_OFF();
 314:	0e 94 38 01 	call	0x270	; 0x270 <LED1_ON>
 318:	2f ef       	ldi	r18, 0xFF	; 255
 31a:	83 ed       	ldi	r24, 0xD3	; 211
 31c:	90 e3       	ldi	r25, 0x30	; 48
 31e:	21 50       	subi	r18, 0x01	; 1
 320:	80 40       	sbci	r24, 0x00	; 0
 322:	90 40       	sbci	r25, 0x00	; 0
 324:	e1 f7       	brne	.-8      	; 0x31e <__vector_12+0x60>
 326:	00 c0       	rjmp	.+0      	; 0x328 <__vector_12+0x6a>
 328:	00 00       	nop
 32a:	0e 94 3e 01 	call	0x27c	; 0x27c <LED1_OFF>
		break;
 32e:	0d c0       	rjmp	.+26     	; 0x34a <__vector_12+0x8c>
		case 'c':
		LED2_ON();_delay_ms(1000);LED2_OFF();
 330:	0e 94 4a 01 	call	0x294	; 0x294 <LED2_ON>
 334:	2f ef       	ldi	r18, 0xFF	; 255
 336:	83 ed       	ldi	r24, 0xD3	; 211
 338:	90 e3       	ldi	r25, 0x30	; 48
 33a:	21 50       	subi	r18, 0x01	; 1
 33c:	80 40       	sbci	r24, 0x00	; 0
 33e:	90 40       	sbci	r25, 0x00	; 0
 340:	e1 f7       	brne	.-8      	; 0x33a <__vector_12+0x7c>
 342:	00 c0       	rjmp	.+0      	; 0x344 <__vector_12+0x86>
 344:	00 00       	nop
 346:	0e 94 50 01 	call	0x2a0	; 0x2a0 <LED2_OFF>
		break;
	}
	


 34a:	ff 91       	pop	r31
 34c:	ef 91       	pop	r30
 34e:	bf 91       	pop	r27
 350:	af 91       	pop	r26
 352:	9f 91       	pop	r25
 354:	8f 91       	pop	r24
 356:	7f 91       	pop	r23
 358:	6f 91       	pop	r22
 35a:	5f 91       	pop	r21
 35c:	4f 91       	pop	r20
 35e:	3f 91       	pop	r19
 360:	2f 91       	pop	r18
 362:	0f 90       	pop	r0
 364:	0f be       	out	0x3f, r0	; 63
 366:	0f 90       	pop	r0
 368:	1f 90       	pop	r1
 36a:	18 95       	reti

0000036c <SPI_Init>:
}

void SPI_Transmit(Uint8t data)
{
		
	SPDR = data ;
 36c:	87 b3       	in	r24, 0x17	; 23
 36e:	8f 7d       	andi	r24, 0xDF	; 223
 370:	87 bb       	out	0x17, r24	; 23
 372:	87 b3       	in	r24, 0x17	; 23
 374:	80 64       	ori	r24, 0x40	; 64
 376:	87 bb       	out	0x17, r24	; 23
 378:	87 b3       	in	r24, 0x17	; 23
 37a:	8f 77       	andi	r24, 0x7F	; 127
 37c:	87 bb       	out	0x17, r24	; 23
 37e:	87 b3       	in	r24, 0x17	; 23
 380:	8f 7e       	andi	r24, 0xEF	; 239
 382:	87 bb       	out	0x17, r24	; 23
 384:	78 94       	sei
 386:	8d b1       	in	r24, 0x0d	; 13
 388:	80 68       	ori	r24, 0x80	; 128
 38a:	8d b9       	out	0x0d, r24	; 13
 38c:	8d b1       	in	r24, 0x0d	; 13
 38e:	80 64       	ori	r24, 0x40	; 64
 390:	8d b9       	out	0x0d, r24	; 13
 392:	83 ec       	ldi	r24, 0xC3	; 195
 394:	8d b9       	out	0x0d, r24	; 13
 396:	08 95       	ret

00000398 <SPI_Received>:
	//while(GET_BIT(SPSR, SPIF) != 1); //y3ny data lsa mwsltsh
}
Uint8t SPI_Received(void){
	
	return SPDR;
 398:	8f b1       	in	r24, 0x0f	; 15
}
 39a:	08 95       	ret

0000039c <_exit>:
 39c:	f8 94       	cli

0000039e <__stop_program>:
 39e:	ff cf       	rjmp	.-2      	; 0x39e <__stop_program>
